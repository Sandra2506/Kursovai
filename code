//Напиши код на языке C++. Идея программы чтобы программа могла распаковывать файл. В программы поступают два файла. Первый запакованный и второй ключ для распаковки. Делается проверка на то, что файл уже не распакован, если файл распакован, то выведи сообщение. если файл запакован, то происходить распаковка и результат записывается в новый файл.
//Файл будет закодирован по методу Шеннона-Фано. Приведи пример, как должен выглядеть файл с ключом для этой программы. Идея программы состоит в том, чтобы просто взять и сопоставить закодированный файл и склюнем и вывести раскодированный файл. 
// Приведи также пример закодированного файла и файла ключа
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <unordered_map>

using namespace std;

// Структура для хранения узла дерева Шеннона-Фано
struct Node {
    char ch;
    int freq;
    Node* left;
    Node* right;
};

// Создание нового узла дерева Шеннона-Фано
Node* createNode(char ch, int freq, Node* left, Node* right) {
    Node* node = new Node();
    node->ch = ch;
    node->freq = freq;
    node->left = left;
    node->right = right;
    return node;
}

// Построение таблицы кодирования по дереву Шеннона-Фано
void buildCode(Node* root, string code, unordered_map<char, string>& codes) {
    if (root == nullptr) {
        return;
    }
    if (root->left == nullptr && root->right == nullptr) {
        codes[root->ch] = code;
    }
    buildCode(root->left, code + "0", codes);
    buildCode(root->right, code + "1", codes);
}

// Распаковка файла
void unpackFile(const string& inputFile, const string& keyFile) {
    // Чтение файла с закодированным содержимым
    ifstream inputFileStream(inputFile, ios::binary);
    if (!inputFileStream) {
        cout << "Ошибка при открытии входного файла." << endl;
        return;
    }

    // Чтение файла с ключом
    ifstream keyFileStream(keyFile);
    if (!keyFileStream) {
        cout << "Ошибка при открытии файла с ключом." << endl;
        return;
    }

    // Чтение содержимого файла с ключом и построение таблицы кодирования
    unordered_map<char, string> codes;
    string line;
    while (getline(keyFileStream, line)) {
        char ch;
        string code;
        if (line.empty()) {
            continue;
        }
        ch = line[0];
        code = line.substr(2);
        codes[ch] = code;
    }

    // Распаковка и запись раскодированного содержимого в новый файл
    ofstream outputFileStream("unpacked.txt", ios::binary);
    string encodedData((istreambuf_iterator<char>(inputFileStream)), istreambuf_iterator<char>());
    string currentCode;
    for (char ch : encodedData) {
        currentCode += ch;
        for (const auto& it : codes) {
            if (it.second == currentCode) {
                outputFileStream << it.first;
                currentCode.clear();
                break;
            }
        }
    }

    inputFileStream.close();
    keyFileStream.close();
    outputFileStream.close();

    cout << "Файл успешно распакован." << endl;
}

int main() {
    string inputFile = "packed.bin";
    string keyFile = "key.txt";

    unpackFile(inputFile, keyFile);

    return 0;
}

